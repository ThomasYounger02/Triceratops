# Python Styles
``` markdown
- 用4个空格来缩进代码；
- 不要在行尾加分号，也不要用分号将两条命令放在同一行；
- 行长度每行不超过80个字符
    - 例外：长的导入模块语句和注释里的URL
    - 如果一个文本字符串在一行放不下, 可以使用圆括号来实现隐式行连接
- 宁缺毋滥的使用括号；
- 顶级定义之间空两行, 方法定义之间空一行；
- 按照标准的排版规范来使用标点两边的空格；
    - 括号内不要有空格；
    - 不要在逗号, 分号, 冒号前面加空格, 但应该在它们后面加(除了在行尾)；
    - 在二元操作符两边都加上一个空格, 比如赋值(=), 比较(==, <, >, !=, <>, <=, >=, in, not in, is, is not), 布尔(and, or, not). 至于算术操作符两边的空格该如何使用, 需要你自己好好判断. 不过两侧务必要保持一致；
    - 当’=’用于指示关键字参数或默认参数值时, 不要在其两侧使用空格
    - 不要用空格来垂直对齐多行间的标记, 因为这会成为维护的负担(适用于:, #, =等)
- 大部分.py文件不必以#!作为文件的开始. 根据 PEP-394 , 程序的main文件应该以#!/usr/bin/python2或者 #!/usr/bin/python3开始；
- 确保对模块, 函数, 方法和行内注释使用正确的风格；
- 注释应该至少离开代码2个空格；
- 即使参数都是**字符串**, 使用%操作符或者格式化方法格式化字符串. 不过也不能一概而论, 你需要在+和%之间好好判定
    - 为多行字符串使用三重双引号”“”而非三重单引号’‘’.
- Python会将 圆括号, 中括号和花括号中的行隐式的连接起来
- 在文件和sockets结束时, 显式的关闭它.
    - 推荐使用 “with”语句 以管理文件
    - 对于不支持使用”with”语句的类似文件的对象,使用 contextlib.closing()
- 为临时代码使用TODO注释, 它是一种短期解决方案. 不算完美, 但够好了。
    - TODO注释应该在所有开头处包含”TODO”字符串, 紧跟着是用括号括起来的你的名字, email地址或其它标识符. 然后是一个可选的冒号. 接着必须有一行注释, 解释要做什么. 主要目的是为了有一个统一的TODO格式, 这样添加注释的人就可以搜索到(并可以按需提供更多细节). 写了TODO注释并不保证写的人会亲自解决问题. 当你写了一个TODO, 请注上你的名字.
- 每个导入应该独占一行
- 导入顺序：标准库导入-第三方库导入-应用程序指定导入
- 通常每个语句应该独占一行
- 访问控制
    - 在Python中, 对于琐碎又不太重要的访问函数, 你应该直接使用公有变量来取代它们, 这样可以避免额外的函数调用开销. 当添加更多功能时, 你可以用属性(property)来保持语法的一致性
- 命名
    - module_name, package_name, ClassName, method_name, ExceptionName, function_name, GLOBAL_VAR_NAME, instance_var_name, function_parameter_name, local_var_name.
    - 应该避免的名称
        1. 单字符名称, 除了计数器和迭代器.
        2. 包/模块名中的连字符(-)
        3. 双下划线开头并结尾的名称(Python保留, 例如__init__)
    - 命名约定
        1. 所谓”内部(Internal)”表示仅模块内可用, 或者, 在类内是保护或私有的.
        2. 用单下划线(_)开头表示模块变量或函数是protected的(使用from module import *时不会包含).
        3. 用双下划线(__)开头的实例变量或方法表示类内私有.
        4. 将相关的类和顶级函数放在同一个模块里. 不像Java, 没必要限制一个类一个模块.
        5. 对类名使用大写字母开头的单词(如CapWords, 即Pascal风格), 但是模块名应该用小写加下划线的方式(如lower_with_under.py). 尽管已经有很多现存的模块使用类似于CapWords.py这样的命名, 但现在已经不鼓励这样做, 因为如果模块名碰巧和类名一致, 这会让人困扰.
    
    [Guido推荐的命名规范](https://www.notion.so/0c3babdda97a4316bbc62efdb045e831?pvs=21)
    
- 即使是一个打算被用作脚本的文件, 也应该是可导入的. 并且简单的导入不应该导致这个脚本的主功能(main functionality)被执行, 这是一种副作用. 主功能应该放在一个main()函数中.
```
# 格式对于编程来说是一件再怎么强调也不为过的“小事”

# 最常见的符号报错提示就是syntaxError:invalid syntax（语法错误：无效语法）。【可能输入了中文符号】